"""baseline after oss

Revision ID: 9a791d3682e7
Revises: 0001
Create Date: 2025-07-11 13:35:54.520080

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "9a791d3682e7"
down_revision: Union[str, None] = "0001"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    import db

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "organisation",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "sensitive_data_mapping",
        sa.Column("hash", sa.String(length=64), nullable=False),
        sa.Column("generated_id", sa.String(), nullable=False),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("hash"),
        sa.UniqueConstraint("generated_id"),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column(
            "has_active_subscription",
            sa.Boolean(),
            server_default="false",
            nullable=False,
        ),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "database",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("engine", sa.String(), nullable=False),
        sa.Column("details", db.JSONB(), nullable=False),
        sa.Column("organisationId", sa.String(), nullable=True),
        sa.Column("ownerId", sa.String(), nullable=True),
        sa.Column("public", sa.Boolean(), nullable=False),
        sa.Column("memory", sa.String(), nullable=True),
        sa.Column("tables_metadata", db.JSONB(), nullable=True),
        sa.Column("dbt_catalog", db.JSONB(), nullable=True),
        sa.Column("dbt_manifest", db.JSONB(), nullable=True),
        sa.Column(
            "safe_mode",
            sa.Boolean(),
            server_default=sa.text("true"),
            nullable=False,
        ),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["organisationId"],
            ["organisation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["ownerId"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_organisation",
        sa.Column("userId", sa.String(), nullable=False),
        sa.Column("organisationId", sa.String(), nullable=False),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["organisationId"],
            ["organisation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["userId"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("userId", "organisationId"),
    )
    op.create_table(
        "project",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("creatorId", sa.String(), nullable=False),
        sa.Column("organisationId", sa.String(), nullable=True),
        sa.Column("databaseId", sa.UUID(), nullable=False),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["creatorId"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["databaseId"],
            ["database.id"],
        ),
        sa.ForeignKeyConstraint(
            ["organisationId"],
            ["organisation.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "query",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("databaseId", sa.UUID(), nullable=False),
        sa.Column("sql", sa.String(), nullable=True),
        sa.Column("rows", db.JSONB(), nullable=True),
        sa.Column("count", sa.Integer(), nullable=True),
        sa.Column("exception", sa.String(), nullable=True),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["databaseId"],
            ["database.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "chart",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("config", db.JSONB(), nullable=True),
        sa.Column("queryId", sa.UUID(), nullable=True),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["queryId"],
            ["query.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "conversation",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("ownerId", sa.String(), nullable=True),
        sa.Column("projectId", sa.UUID(), nullable=True),
        sa.Column("databaseId", sa.UUID(), nullable=False),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["databaseId"],
            ["database.id"],
        ),
        sa.ForeignKeyConstraint(
            ["ownerId"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["projectId"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "note",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("content", sa.String(), nullable=True),
        sa.Column("projectId", sa.UUID(), nullable=True),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["projectId"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "project_tables",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("projectId", sa.UUID(), nullable=False),
        sa.Column("databaseName", sa.String(), nullable=True),
        sa.Column("schemaName", sa.String(), nullable=True),
        sa.Column("tableName", sa.String(), nullable=True),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["projectId"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "business_entity",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("definition", sa.Text(), nullable=True),
        sa.Column("completeness", sa.Integer(), nullable=True),
        sa.Column("quality_score", sa.Integer(), nullable=True),
        sa.Column("review_date", sa.DateTime(), nullable=True),
        sa.Column("report", sa.String(), nullable=True),
        sa.Column("database_id", sa.UUID(), nullable=False),
        sa.Column("review_conversation_id", sa.UUID(), nullable=True),
        sa.Column("table_ref", sa.String(), nullable=True),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["database_id"],
            ["database.id"],
        ),
        sa.ForeignKeyConstraint(
            ["review_conversation_id"],
            ["conversation.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_business_entity_name"), "business_entity", ["name"], unique=True
    )
    op.create_table(
        "conversation_message",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("conversationId", sa.UUID(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("content", sa.String(), nullable=True),
        sa.Column("functionCall", db.JSONB(), nullable=True),
        sa.Column("data", db.JSONB(), nullable=True),
        sa.Column("queryId", sa.UUID(), nullable=True),
        sa.Column("reqId", sa.String(), nullable=True),
        sa.Column("functionCallId", sa.String(), nullable=True),
        sa.Column("image", sa.LargeBinary(), nullable=True),
        sa.Column("isAnswer", sa.Boolean(), nullable=False),
        sa.Column("chartId", sa.UUID(), nullable=True),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["chartId"],
            ["chart.id"],
        ),
        sa.ForeignKeyConstraint(
            ["conversationId"],
            ["conversation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["queryId"],
            ["query.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_favorite",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("query_id", sa.UUID(), nullable=True),
        sa.Column("chart_id", sa.UUID(), nullable=True),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.CheckConstraint(
            "(query_id IS NOT NULL AND chart_id IS NULL) OR (query_id IS NULL AND chart_id IS NOT NULL)",  # noqa: E501
            name="check_favorite_type",
        ),
        sa.ForeignKeyConstraint(
            ["chart_id"],
            ["chart.id"],
        ),
        sa.ForeignKeyConstraint(
            ["query_id"],
            ["query.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "issues",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("title", sa.String(length=256), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "scope",
            sa.Enum("DATA", "BUSINESS", "BOTH", "UNKNOWN", name="issuescope"),
            nullable=True,
        ),
        sa.Column(
            "severity",
            sa.Enum("LOW", "MEDIUM", "HIGH", "CRITICAL", name="severity"),
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.Enum("OPEN", "IN_PROGRESS", "DONE", name="status"),
            nullable=False,
        ),
        sa.Column("database_id", sa.UUID(), nullable=True),
        sa.Column("message_id", sa.UUID(), nullable=True),
        sa.Column("business_entity_id", sa.UUID(), nullable=True),
        sa.Column(
            "createdAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updatedAt",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["business_entity_id"],
            ["business_entity.id"],
        ),
        sa.ForeignKeyConstraint(
            ["database_id"],
            ["database.id"],
        ),
        sa.ForeignKeyConstraint(
            ["message_id"],
            ["conversation_message.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("issues")
    op.drop_table("user_favorite")
    op.drop_table("conversation_message")
    op.drop_index(op.f("ix_business_entity_name"), table_name="business_entity")
    op.drop_table("business_entity")
    op.drop_table("project_tables")
    op.drop_table("note")
    op.drop_table("conversation")
    op.drop_table("chart")
    op.drop_table("query")
    op.drop_table("project")
    op.drop_table("user_organisation")
    op.drop_table("database")
    op.drop_table("user")
    op.drop_table("sensitive_data_mapping")
    op.drop_table("organisation")
    # ### end Alembic commands ###
