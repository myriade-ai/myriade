"""add write confirmation system

Revision ID: c8852c2a5ee9
Revises: e0c32661a349
Create Date: 2025-09-09 11:30:58.877719

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

from config import DATABASE_URL

# revision identifiers, used by Alembic.
revision: str = "c8852c2a5ee9"
down_revision: Union[str, None] = "e0c32661a349"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. Convert safe_mode to write_mode enum
    # Create the enum type
    write_mode_enum = sa.Enum(
        "read-only", "confirmation", "skip-confirmation", name="write_mode_enum"
    )
    write_mode_enum.create(op.get_bind())

    # Add the new write_mode column with default value
    op.add_column(
        "database",
        sa.Column(
            "write_mode", write_mode_enum, server_default="confirmation", nullable=False
        ),
    )

    # Convert existing safe_mode values to write_mode values
    if DATABASE_URL.startswith("postgres"):
        op.execute("""
            UPDATE database 
            SET write_mode = CASE 
                WHEN safe_mode = true THEN 'confirmation'::write_mode_enum
                WHEN safe_mode = false THEN 'skip-confirmation'::write_mode_enum
                ELSE 'confirmation'::write_mode_enum
            END
        """)
    else:  # SQLite
        op.execute("""
            UPDATE database 
            SET write_mode = CASE 
                WHEN safe_mode = true THEN 'confirmation'
                WHEN safe_mode = false THEN 'skip-confirmation'
                ELSE 'confirmation'
            END
        """)

    # Drop the old safe_mode column and unused user columns
    op.drop_column("database", "safe_mode")
    op.drop_column("user", "credits")
    op.drop_column("user", "has_active_subscription")

    # 2. Add query status tracking
    # Create the enum type
    query_status_enum = sa.Enum(
        "pending_confirmation",
        "running",
        "completed",
        "cancelled",
        "failed",
        name="query_status_enum",
    )
    query_status_enum.create(op.get_bind(), checkfirst=True)

    # Add status and timing columns
    op.add_column(
        "query",
        sa.Column(
            "status", query_status_enum, server_default="completed", nullable=False
        ),
    )
    op.add_column("query", sa.Column("started_at", sa.DateTime(), nullable=True))
    op.add_column("query", sa.Column("completed_at", sa.DateTime(), nullable=True))

    # 3. Add operation type tracking
    op.add_column("query", sa.Column("operation_type", sa.String(), nullable=True))


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Remove query enhancements
    op.drop_column("query", "operation_type")
    op.drop_column("query", "completed_at")
    op.drop_column("query", "started_at")
    op.drop_column("query", "status")

    # Drop the enum type
    query_status_enum = sa.Enum(name="query_status_enum")
    query_status_enum.drop(op.get_bind(), checkfirst=True)

    # Restore user columns
    op.add_column(
        "user",
        sa.Column(
            "has_active_subscription",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "user",
        sa.Column(
            "credits",
            sa.INTEGER(),
            server_default=sa.text("5"),
            autoincrement=False,
            nullable=False,
        ),
    )

    # Add back the safe_mode column
    op.add_column(
        "database",
        sa.Column(
            "safe_mode",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=False,
        ),
    )

    # Convert write_mode values back to safe_mode
    # 'read-only' or 'confirmation' -> safe_mode=true
    # 'skip-confirmation' -> safe_mode=false
    op.execute("""
        UPDATE database 
        SET safe_mode = CASE 
            WHEN write_mode IN ('read-only', 'confirmation') THEN true
            WHEN write_mode = 'skip-confirmation' THEN false
            ELSE true
        END
    """)

    # Drop the write_mode column and enum type
    op.drop_column("database", "write_mode")
    sa.Enum(name="write_mode_enum").drop(op.get_bind())

    # ### end Alembic commands ###
