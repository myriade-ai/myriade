# serializer version: 1
# name: test_functions
  list([
    'sql_query',
    'save_to_memory',
    'submit',
    'render_echarts',
    'DBT-test__fetch_model',
    'DBT-test__fetch_model_list',
    'DBT-test__search_models',
    'Notes-Notes__close_note',
    'Notes-Notes__create_note',
    'Notes-Notes__delete_note',
    'Notes-Notes__list_notes',
    'Notes-Notes__open_note',
  ])
# ---
# name: test_functions_schema
  list([
    dict({
      'description': 'Run an SQL query on the database and return the result',
      'name': 'sql_query',
      'parameters': dict({
        'properties': dict({
          'name': dict({
            'default': '',
            'description': 'The name/title of the query',
            'title': 'Name',
            'type': 'string',
          }),
          'query': dict({
            'description': "The SQL query string to be executed. Don't forget to escape this if you use double quote.",
            'title': 'Query',
            'type': 'string',
          }),
        }),
        'required': list([
          'query',
        ]),
        'title': 'Input for `sql_query`',
        'type': 'object',
      }),
    }),
    dict({
      'description': "Add a text to the AI's memory",
      'name': 'save_to_memory',
      'parameters': dict({
        'properties': dict({
          'text': dict({
            'description': 'The text to add to the memory',
            'title': 'Text',
            'type': 'string',
          }),
        }),
        'required': list([
          'text',
        ]),
        'title': 'Input for `save_to_memory`',
        'type': 'object',
      }),
    }),
    dict({
      'description': 'Give the final response from the user demand/query',
      'name': 'submit',
      'parameters': dict({
        'properties': dict({
          'name': dict({
            'anyOf': list([
              dict({
                'type': 'string',
              }),
              dict({
                'type': 'null',
              }),
            ]),
            'default': None,
            'description': "The name/title of the query. 'SQL' only for now",
            'title': 'Name',
          }),
          'query': dict({
            'description': "The SQL query string to be executed. Don't forget to escape this if you use double quote.",
            'title': 'Query',
            'type': 'string',
          }),
        }),
        'required': list([
          'query',
        ]),
        'title': 'Input for `submit`',
        'type': 'object',
      }),
    }),
    dict({
      'description': 'Display a chart (using Echarts 4). Provide the chart_options without the "dataset" parameter We will SQL result to fill the dataset.source automatically Don\'t forget to Map from Data to Charts (series.encode) Don\'t use specific color in the chart_options unless the user asked for it When creating bar charts with ECharts, make sure to set the correct axis types. For categorical data (like driver names) use \'category\' type on the x-axis when displaying bars vertically, or on the y-axis when displaying bars horizontally. For numerical data (like wins or points) use \'value\' type on the corresponding axis. Also verify that the encode properties correctly map your data fields to the appropriate axes (\'x\' for categories, \'y\' for values in vertical bar charts; reversed in horizontal bar charts).',
      'name': 'render_echarts',
      'parameters': dict({
        'properties': dict({
          'chart_options': dict({
            'description': 'The options of the chart',
            'title': 'Chart Options',
            'type': 'object',
          }),
          'sql': dict({
            'description': 'The SQL query to execute',
            'title': 'Sql',
            'type': 'string',
          }),
        }),
        'required': list([
          'chart_options',
          'sql',
        ]),
        'title': 'Input for `render_echarts`',
        'type': 'object',
      }),
    }),
    dict({
      'description': 'Fetch all model details from the DBT catalog.',
      'name': 'DBT-test__fetch_model',
      'parameters': dict({
        'properties': dict({
          'key': dict({
            'title': 'Key',
            'type': 'string',
          }),
        }),
        'required': list([
          'key',
        ]),
        'title': 'Input for `fetch_model`',
        'type': 'object',
      }),
    }),
    dict({
      'description': 'Return a list of models in the DBT catalog. Return: key, description',
      'name': 'DBT-test__fetch_model_list',
      'parameters': dict({
        'properties': dict({
        }),
        'title': 'Input for `fetch_model_list`',
        'type': 'object',
      }),
    }),
    dict({
      'description': 'Search for a model in the DBT catalog. Return: key, description',
      'name': 'DBT-test__search_models',
      'parameters': dict({
        'properties': dict({
          'query': dict({
            'title': 'Query',
            'type': 'string',
          }),
        }),
        'required': list([
          'query',
        ]),
        'title': 'Input for `search_models`',
        'type': 'object',
      }),
    }),
    dict({
      'description': None,
      'name': 'Notes-Notes__close_note',
      'parameters': dict({
        'properties': dict({
          'id': dict({
            'title': 'Id',
            'type': 'integer',
          }),
        }),
        'required': list([
          'id',
        ]),
        'title': 'Input for `close_note`',
        'type': 'object',
      }),
    }),
    dict({
      'description': None,
      'name': 'Notes-Notes__create_note',
      'parameters': dict({
        'properties': dict({
          'content': dict({
            'title': 'Content',
            'type': 'string',
          }),
          'title': dict({
            'title': 'Title',
            'type': 'string',
          }),
        }),
        'required': list([
          'title',
          'content',
        ]),
        'title': 'Input for `create_note`',
        'type': 'object',
      }),
    }),
    dict({
      'description': 'Delete a note from the project',
      'name': 'Notes-Notes__delete_note',
      'parameters': dict({
        'properties': dict({
          'id': dict({
            'title': 'Id',
            'type': 'string',
          }),
        }),
        'required': list([
          'id',
        ]),
        'title': 'Input for `delete_note`',
        'type': 'object',
      }),
    }),
    dict({
      'description': None,
      'name': 'Notes-Notes__list_notes',
      'parameters': dict({
        'properties': dict({
        }),
        'title': 'Input for `list_notes`',
        'type': 'object',
      }),
    }),
    dict({
      'description': None,
      'name': 'Notes-Notes__open_note',
      'parameters': dict({
        'properties': dict({
          'id': dict({
            'title': 'Id',
            'type': 'integer',
          }),
        }),
        'required': list([
          'id',
        ]),
        'title': 'Input for `open_note`',
        'type': 'object',
      }),
    }),
  ])
# ---
# name: test_tools
  dict({
    'Notes': 'Notes',
    'test': 'DBT',
  })
# ---
