name: Review App Deployment

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  FLY_REGION: iad
  FLY_ORG: personal

jobs:
  review_app:
    runs-on: ubuntu-latest
    
    # Prevent multiple deployments for the same PR
    concurrency:
      group: pr-${{ github.event.number }}
      cancel-in-progress: false

    environment:
      name: pr-${{ github.event.number }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy review app
        id: deploy
        if: github.event.action != 'closed'
        env:
          FLY_APP: pr-${{ github.event.number }}-myriade
        run: |
          # Create app-specific fly.toml
          cp fly.toml fly.review.toml
          
          # Set the app name in the config
          sed -i 's/app = ""/app = "'$FLY_APP'"/' fly.review.toml
          
          # Deploy the app
          flyctl deploy --config fly.review.toml --remote-only --build-arg BUILDKIT_PROGRESS=plain
          
          # Get the app URL
          APP_URL="https://$FLY_APP.fly.dev"
          echo "url=$APP_URL" >> $GITHUB_OUTPUT
          
          # Add comment to PR with deployment info
          echo "üöÄ Review app deployed!" >> deployment_info.txt
          echo "üì± **Preview URL:** $APP_URL" >> deployment_info.txt
          echo "üè∑Ô∏è **App Name:** $FLY_APP" >> deployment_info.txt
          echo "üåç **Region:** $FLY_REGION" >> deployment_info.txt

      - name: Comment PR with deployment info
        if: github.event.action != 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const deploymentInfo = fs.readFileSync('deployment_info.txt', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: deploymentInfo
            });

      - name: Clean up review app
        if: github.event.action == 'closed'
        env:
          FLY_APP: pr-${{ github.event.number }}-myriade
        run: |
          # Check if app exists before trying to destroy it
          if flyctl apps list | grep -q "$FLY_APP"; then
            echo "üóëÔ∏è Destroying review app: $FLY_APP"
            flyctl apps destroy $FLY_APP --yes
          else
            echo "‚ÑπÔ∏è App $FLY_APP not found, nothing to clean up"
          fi

      - name: Comment PR with cleanup info
        if: github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üóëÔ∏è Review app has been cleaned up and destroyed.'
            });